
package ua.footballdata.model.entity;

import java.util.List;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped;

//@Entity
//@Table(name = "seasons")

@DynamoDBTable(tableName = "seasons")

/*
 * @JsonRootName("season")
 * 
 * @XmlAccessorType(XmlAccessType.FIELD)
 * 
 * @XmlRootElement(name = "season")
 */
public class SeasonEntity {
	// @Id
	// @Column
	private Long id;
	// @Column(name = "start_date")
	// @Temporal(TemporalType.DATE)
	private String startDate;
	// @Column(name = "end_date")
	// @Temporal(TemporalType.DATE)
	private String endDate;
	// @Column(name = "current_match_day")
	private Integer currentMatchday;
	// @ManyToOne(optional = true)
	// @JoinColumn(name = "winner")
	private TeamEntity winner;

	/*
	 * @XmlElement(name = "matche")
	 * 
	 * @JsonProperty("matche")
	 */
	private List<MatchEntity> matches = null;

	private List<SeasonStage> stages = null;

	@DynamoDBHashKey(attributeName = "id")
	// @DynamoDBAutoGeneratedKey
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@DynamoDBAttribute
	public String getStartDate() {
		return startDate;
	}

	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}

	@DynamoDBAttribute
	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	@DynamoDBAttribute
	public Integer getCurrentMatchday() {
		return currentMatchday;
	}

	public void setCurrentMatchday(Integer currentMatchday) {
		this.currentMatchday = currentMatchday;
	}

	@DynamoDBAttribute
	@DynamoDBTyped(DynamoDBAttributeType.M)
	public TeamEntity getWinner() {
		return winner;
	}

	public void setWinner(TeamEntity winner) {
		this.winner = winner;
	}

	@DynamoDBAttribute(attributeName = "matches")
	@DynamoDBTyped(DynamoDBAttributeType.L)
	public List<MatchEntity> getMatches() {
		return matches;
	}

	public void setMatches(List<MatchEntity> matches) {
		this.matches = matches;
	}


	@DynamoDBAttribute(attributeName = "stages")
	//@DynamoDBTyped(DynamoDBAttributeType.L)
	public List<SeasonStage> getStages() {
		return stages;
	}

	public void setStages(List<SeasonStage> stages) {
		this.stages = stages;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof SeasonEntity)) return false;

		SeasonEntity that = (SeasonEntity) o;

		if (id != null ? !id.equals(that.id) : that.id != null) return false;
		if (startDate != null ? !startDate.equals(that.startDate) : that.startDate != null) return false;
		if (endDate != null ? !endDate.equals(that.endDate) : that.endDate != null) return false;
		if (currentMatchday != null ? !currentMatchday.equals(that.currentMatchday) : that.currentMatchday != null)
			return false;
		if (winner != null ? !winner.equals(that.winner) : that.winner != null) return false;
		if (matches != null ? !matches.equals(that.matches) : that.matches != null) return false;
		return stages != null ? stages.equals(that.stages) : that.stages == null;
	}

	@Override
	public int hashCode() {
		int result = id != null ? id.hashCode() : 0;
		result = 31 * result + (startDate != null ? startDate.hashCode() : 0);
		result = 31 * result + (endDate != null ? endDate.hashCode() : 0);
		result = 31 * result + (currentMatchday != null ? currentMatchday.hashCode() : 0);
		result = 31 * result + (winner != null ? winner.hashCode() : 0);
		result = 31 * result + (matches != null ? matches.hashCode() : 0);
		result = 31 * result + (stages != null ? stages.hashCode() : 0);
		return result;
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder("SeasonEntity{");
		sb.append("id=").append(id);
		sb.append(", startDate='").append(startDate).append('\'');
		sb.append(", endDate='").append(endDate).append('\'');
		sb.append(", currentMatchday=").append(currentMatchday);
		sb.append(", winner=").append(winner);
		sb.append(", matches=").append(matches);
		sb.append(", stages=").append(stages);
		sb.append('}');
		return sb.toString();
	}
}
